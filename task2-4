import pulp

# Step 1: Define the Problem
# Maximize profit for a factory producing products A and B under resource constraints
problem = pulp.LpProblem("Maximize_Profit", pulp.LpMaximize)

# Step 2: Define Decision Variables
# Number of units produced for Product A and Product B
x_A = pulp.LpVariable("Product_A", lowBound=0, cat="Continuous")
x_B = pulp.LpVariable("Product_B", lowBound=0, cat="Continuous")

# Step 3: Define Objective Function
# Profit per unit: $40 for Product A and $30 for Product B
profit_A = 40
profit_B = 30
problem += profit_A * x_A + profit_B * x_B, "Total_Profit"

# Step 4: Add Constraints
# Resource constraints (e.g., labor hours, machine hours)
# Constraint 1: Total labor hours available = 200
problem += 2 * x_A + 1 * x_B <= 200, "Labor_Constraint"

# Constraint 2: Total machine hours available = 150
problem += 1 * x_A + 2 * x_B <= 150, "Machine_Constraint"

# Step 5: Solve the Problem
problem.solve()

# Step 6: Display Results
print("Status:", pulp.LpStatus[problem.status])
print("Optimal Production Plan:")
print(f"- Product A: {x_A.varValue} units")
print(f"- Product B: {x_B.varValue} units")
print("Total Profit:", pulp.value(problem.objective))

# Insights
# Visualizing the constraints and objective function
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 100, 500)
plt.figure(figsize=(10, 6))

# Plot constraints
plt.plot(x, (200 - 2 * x), label="Labor Constraint", color="blue")
plt.plot(x, (150 - 1 * x) / 2, label="Machine Constraint", color="green")

# Feasible region
plt.fill_between(x, 0, np.minimum((200 - 2 * x), (150 - 1 * x) / 2), color="gray", alpha=0.3, label="Feasible Region")

# Objective function (Profit line)
profit_line = (pulp.value(problem.objective) - profit_A * x) / profit_B
plt.plot(x, profit_line, label="Objective Function (Profit Line)", color="red", linestyle="--")

# Labels and Legend
plt.xlim(0, 100)
plt.ylim(0, 100)
plt.xlabel("Product A Units")
plt.ylabel("Product B Units")
plt.title("Optimization Problem: Feasible Region and Constraints")
plt.legend()
plt.grid()
plt.show()
